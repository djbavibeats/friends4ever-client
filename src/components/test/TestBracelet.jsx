/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useMemo } from "react";
import { useGLTF, OrbitControls } from "@react-three/drei"
import { useControls } from "leva"
import { Vector3 } from "three";
import { EffectComposer } from "@react-three/postprocessing";

export default function TestBracelet(props) {
  const { nodes, materials } = useGLTF("./models/chain-no-mat.gltf")
  console.log(EffectComposer)
  const opts = useControls({
    red: {
      min: - 1,
      max: 1,
      value: - 0.25
    },
    green: {
      min: -1,
      max: 1,
      value: - 0.25
    },
    blue: {
      min: - 1,
      max: 1,
      value: 0.25
    },
    shade: {
      min: 3,
      max: 30,
      value: 12.0
    }
  })

  const shaderArgs = useMemo(
    () => ({
      uniforms: {
        uTime: { value: 0 },
        uColor: { value: new Vector3(opts.red, opts.green, opts.blue) }, // Color Correction
        uShade: { value: opts.shade }
      },
      vertexShader: /*glsl*/ `
      varying vec3 vNormal;
      void main() {
        vNormal = normalize(normalMatrix * normal);
        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
      } 
    `,
      fragmentShader: /*glsl*/ `
      varying vec3 vNormal;
      uniform float uTime;
      uniform float uShade;
      uniform vec3 uColor;
      void main() {
        gl_FragColor = vec4(vNormal * (sin(vNormal.z * uShade ) * .5 + .5) + uColor, 1.);
      } 
    `
    }),
    [opts]
  )

  return (<>
  
  <OrbitControls />
  <directionalLight />
  <pointLight 
      position={[ 0.0, -0.5, -1.0 ]}
      intensity={ 5.0 }
  />
  <ambientLight intensity={ 0.4 } />
    <group {...props} dispose={null} scale={ 1.25 } rotation={[ -.125, 0, 0.125 ]} position={[ 0, 0.3, 0 ]}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.v3.geometry}
        // material={nodes.v3.material}
        position={[0, 0.002, 0]}
      >
        <shaderMaterial args={[shaderArgs]} />

        {/* <meshPhysicalMaterial 
          color={ '#aeaeae' }
          roughness={ 0.3 }
          metalness={ 1.0 }
          ior={ 1.3 }
          reflectivity={ 1 }
          iridescence={ 0.555 }
          iridescenceIOR={ 1.3 }
          sheen={ 1 }
          sheenRoughness={ 0.25 }
          sheenColor={ '#bc0000' }
          clearcoat={ 0 }
          clearcoatRoughness={ 0 }
          specularIntensity={ 1 }
        /> */}
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BigStar.geometry}
          material={nodes.BigStar.material}
          position={[-0.156, -0.338, 0.979]}
          rotation={[Math.PI / 2, 0, 0.175]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Charm.geometry}
          material={nodes.Charm.material}
          position={[-0.161, -0.052, 0.986]}
          rotation={[Math.PI / 2, 0, -1.396]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CharmRing001.geometry}
          material={nodes.CharmRing001.material}
          position={[-0.161, -0.132, 0.986]}
          rotation={[Math.PI / 2, 0, -2.967]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.ClaspChain.geometry}
          material={nodes.ClaspChain.material}
          position={[0.606, 0.002, 0.802]}
          rotation={[Math.PI / 2, 0, -0.737]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.ClaspEnd.geometry}
          material={nodes.ClaspEnd.material}
          position={[0.452, -0.063, 1.095]}
          rotation={[1.217, 0.243, 2.028]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder001.geometry}
          material={nodes.Cylinder001.material}
          position={[0.57, -0.014, 1.143]}
          rotation={[1.217, 0.243, 2.028]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder002.geometry}
          material={nodes.Cylinder002.material}
          position={[0.557, -0.019, 1.138]}
          rotation={[1.217, 0.243, 2.028]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder003.geometry}
          material={nodes.Cylinder003.material}
          position={[0.344, -0.106, 1.055]}
          rotation={[1.217, 0.243, 2.028]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder004.geometry}
          material={nodes.Cylinder004.material}
          position={[0.331, -0.111, 1.05]}
          rotation={[1.217, 0.243, 2.028]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Diamond.geometry}
          material={nodes.Diamond.material}
          position={[-0.161, -0.337, 1.011]}
          rotation={[Math.PI / 2, 0, 0.175]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.DiamondRing.geometry}
          material={nodes.DiamondRing.material}
          position={[-0.161, -0.337, 1.01]}
          rotation={[Math.PI / 2, 0, 0.175]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.EndChain.geometry}
          material={nodes.EndChain.material}
          position={[0.098, 0, 0.996]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Torus001.geometry}
          material={nodes.Torus001.material}
          position={[0.535, -0.02, 0.869]}
          rotation={[2.792, -0.645, -0.578]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Torus002.geometry}
          material={nodes.Torus002.material}
          position={[0.499, -0.048, 0.957]}
          rotation={[-1.547, -0.452, 1.274]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Torus003.geometry}
          material={nodes.Torus003.material}
          position={[0.471, -0.064, 1.059]}
          rotation={[2.234, -1.027, 2.138]}
        />
      </mesh>
    </group>
  </>)
}

useGLTF.preload("./models/chain-no-mat.gltf")